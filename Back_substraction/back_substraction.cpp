// Program to perform a background substraction on a stream of video
// Author: Salah Eddine Ghamri
// Opencv includes
#include <opencv2/opencv.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
#include <opencv2/video/background_segm.hpp>
#include <opencv2/videoio.hpp>
//C++ includes
#include <iostream>
#include <string>
//C includes
#include <stdio.h>

using namespace std;
using namespace cv;

//Global Variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; //Pointer for MOG2 Background substractor object.
char keyboard;

//Implemetation of functions
void processVideo(char* fileName);
void processImages(string path);

void help()
{
    cout
    << "--------------------------------------------------------------------------" << endl
    << "This program implements background subtraction method provided by "  << endl
    << " OpenCV."                                                                   << endl
    << " Authon : Salah Eddine Ghamri"                                              << endl;
}

int main(int argc, char* argv[]){
    help();
    //I am expecting 2 inputs => 3
    if(argc != 3) {
        cerr <<"Incorret input list" << endl;
        cerr <<"exiting..." << endl;
        return EXIT_FAILURE;
    }
    //create Gui windows
    namedWindow("Frame");
    namedWindow("FG Mask MOG 2");

    //create Background Substractor objects
    pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach
    
    if(strcmp(argv[1], "-vid") == 0 ){
        //input data coming from sequence of video
        processVideo(argv[2]);
    }

    else if(strcmp(argv[1], "-img") == 0 ){
        // input data coming from images
        processImages(argv[2]);
    }
    else{
        //error reading the inputs
        cerr << "Please, check the input parameters " << endl;
        cerr << "Exiting ..." << endl;
        return EXIT_FAILURE;
    }
    //destroy GUI windows
    destroyAllWindows(); 
    return EXIT_SUCCESS;
}

//functions definitions
void processVideo(char* fileName){
    // Create the capture object 
    VideoCapture capture(fileName);
    if(!capture.isOpened()){
        //error in opening the video input
        cerr << "Unable to open video file: " << fileName << endl;
        exit(EXIT_FAILURE);
    }
    while( keyboard != 'q' && keyboard != 27 ){
        if(!capture.read(frame)) {
            cerr << "Unable to read next frame." << endl;
            cerr << "Exiting..." << endl;
            exit(EXIT_FAILURE);
        }
        //update the guassian model mask
        // apply( input, output)
        pMOG2 -> apply(frame, fgMaskMOG2);

        Point p1(10, 2);
        Point p2(100, 20);
        Point p3(15, 15);
        // draw a rectangle
        rectangle(frame, p1, p2, cv::Scalar(255,255,255), -1);

        // get frame number and write it on frame
        stringstream ss;
        ss << capture.get(CAP_PROP_POS_FRAMES);
        string frameNumberString = ss.str();

        // write a text on the frame
        putText(frame, frameNumberString.c_str(), p3, FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));

        //get the input from the keyboard
        keyboard = (char)waitKey( 30 );
        //check is frame is empty

        if(frame.empty()){
            cout << "The end or Empty frame detected <!> ";
            break;
        }
        imshow("frame", frame);
        imshow("fgmaskMOG2", fgMaskMOG2);
        //get the input from the keyboard
    }
    capture.release();

}

void processImages(string path){
    cout << "This option is not created yet." << endl;
}