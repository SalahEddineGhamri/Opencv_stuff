// Program to perform a background substraction on a stream of video
// Author: Salah Eddine Ghamri
// Opencv includes
#include <opencv2/opencv.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
#include <opencv2/video/background_segm.hpp>
//C++ includes
#include <iostream>
#include <string>
//C includes
#include <stdio.h>

using namespace std;
using namespace cv;

//Global Variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; //Pointer for MOG2 Background substractor object.
char keyboard;

//Implemetation of functions
void processVideo(char* path);
void processImages(string path);

void help()
{
    cout
    << "--------------------------------------------------------------------------" << endl
    << "This program shows how to use background subtraction methods provided by "  << endl
    << " OpenCV."                                                                   << endl
    << " Authon : Salah Eddine Ghamri"                                              << endl;
}

int main(int argc, char* argv[]){
    help();
    //I am expecting 2 inputs => 3
    if(argc != 3) {
        cerr <<"Incorret input list" << endl;
        cerr <<"exiting..." << endl;
        return EXIT_FAILURE;
    }
    //create Gui windows
    namedWindow("Frame");
    namedWindow("FG Mask MOG 2");

    //create Background Substractor objects
    pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach
    
    if(strcmp(argv[1], "-vid") == 0 ){
        //input data coming from sequence of video
        processVideo(argv[2]);
    }

    else if(strcmp(argv[1], "-img") == 0 ){
        // input data coming from images
        processImages(argv[2]);
    }
    else{
        //error reading the inputs
        cerr << "Please, check the input parameters " << endl;
        cerr << "Exiting ..." << endl;
        return EXIT_FAILURE;
    }
    //destroy GUI windows
    destroyAllWindows(); 
    return EXIT_SUCCESS;
}

//functions definitions
void processVideo(char* path){
    cout << path << endl;
}

void processImages(string path){
    cout << path << endl;
}